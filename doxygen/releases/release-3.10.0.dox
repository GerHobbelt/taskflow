namespace tf {

/** @page release-3-10-0 Release 3.10.0 (Master)

%Taskflow 3.10.0 is the newest developing line to new features and improvements 
we continue to support.
It is also where this documentation is generated.
Many things are considered @em experimental and may change or break from time to time.
While it may be difficult to be keep all things consistent when introducing new features, 
we continue to try our best to ensure backward compatibility.

@tableofcontents

@section release-3-10-0_download Download

To download the newest version of %Taskflow, please clone the master branch 
from <a href="https://github.com/taskflow/taskflow">%Taskflow's GitHub</a>.

@section release-3-10-0_system_requirements System Requirements

To use %Taskflow v3.10.0, you need a compiler that supports C++17:

@li GNU C++ Compiler at least v8.4 with -std=c++17
@li Clang C++ Compiler at least v6.0 with -std=c++17
@li Microsoft Visual Studio at least v19.27 with /std:c++17
@li AppleClang Xcode Version at least v12.0 with -std=c++17
@li Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17
@li Intel C++ Compiler at least v19.0.1 with -std=c++17
@li Intel DPC++ Clang Compiler at least v13.0.0 with -std=c++17

%Taskflow works on Linux, Windows, and Mac OS X.

@attention
Although %Taskflow supports primarily C++17, you can enable C++20 compilation
through `-std=c++20` to achieve better performance due to new C++20 features.

@section release-3-10-0_summary Release Summary


@section release-3-10-0_new_features New Features

@subsection release-3-10-0_taskflow_core Taskflow Core

+ improved work-stealing loop with an adaptive breaking strategy
+ improved shut-down signal detection using decentralized variables
+ fixed MSVC compilation warnings due to signed conversion on sort
+ added debug mode for the windows CI to GitHub actions
+ added index range-based parallel-for algorithm ([#551](https://github.com/taskflow/taskflow/issues/551))

@code{.cpp}
// initialize data1 and data2 to 10 using two different approaches
std::vector<int> data1(100), data2(100);

// Approach 1: initialize data1 using explicit index range
taskflow.for_each_index(0, 100, 1, [&](int i){ data1[i] = 10; });

// Approach 2: initialize data2 using tf::IndexRange
tf::IndexRange<int> range(0, 100, 1);
taskflow.for_each_by_index(range, [&](tf::IndexRange<int>& subrange){
  for(int i=subrange.begin(); i<subrange.end(); i+=subrange.step_size()) {
    data2[i] = 10;
  }
});
@endcode

+ added index range-based parallel-reduction algorithm ([i#654](https://github.com/taskflow/taskflow/issues/654))

@code{.cpp}
std::vector<double> data(100000);
double res = 1.0;
taskflow.reduce_by_index(
  // index range
  tf::IndexRange<size_t>(0, N, 1),
  // final result
  res,
  // local reducer
  [&](tf::IndexRange<size_t> subrange, std::optional<double> running_total) { 
    double residual = running_total ? *running_total : 0.0;
    for(size_t i=subrange.begin(); i<subrange.end(); i+=subrange.step_size()) {
      data[i] = 1.0;
      residual += data[i];
    }
    printf("partial sum = %lf\n", residual);
    return residual;
  },
  // global reducer
  std::plus<double>()
);
@endcode

@subsection release-3-10-0_utilities Utilities

+ added tf::IndexRange for index range-based parallel-for algorithm
+ added tf::distance to calculate the number of iterations in an index range
+ added tf::is_index_range_invalid to check if the given index range is valid

@section release-3-10-0_bug_fixes Bug Fixes 

+ fixed the compilation error of template deduction on packaged_task ([#657](https://github.com/taskflow/taskflow/issues/657))

Currently, there are no bug fixes.

@section release-3-10-0_breaking_changes Breaking Changes

Currently, there are no breaking changes.

@section release-3-10-0_documentation Documentation

+ revised @ref ParallelIterations
+ revised @ref ParallelReduction
+ revised @ref ParallelFind

@section release-3-10-0_miscellaneous_items Miscellaneous Items

Please do not hesitate to contact @twhuang if you intend to collaborate with us 
on using %Taskflow in your scientific computing projects.

*/

}


