namespace tf {

/** @page release-3-6-0 Release 3.6.0 (Master)

%Taskflow 3.6.0 is the newest developing line to new features and improvements 
we continue to support.
It is also where this documentation is generated.
Many things are considered @em experimental and may change or break from time to time.
While it may be difficult to be keep all things consistent when introducing new features, 
we continue to try our best to ensure backward compatibility.

@tableofcontents

@section release-3-6-0_download Download

To download the newest version of %Taskflow, please clone the master branch 
from <a href="https://github.com/taskflow/taskflow">%Taskflow's GitHub</a>.

@section release-3-6-0_system_requirements System Requirements

To use %Taskflow v3.6.0, you need a compiler that supports C++17:

@li GNU C++ Compiler at least v8.4 with -std=c++17
@li Clang C++ Compiler at least v6.0 with -std=c++17
@li Microsoft Visual Studio at least v19.27 with /std:c++17
@li AppleClang Xode Version at least v12.0 with -std=c++17
@li Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17
@li Intel C++ Compiler at least v19.0.1 with -std=c++17
@li Intel DPC++ Clang Compiler at least v13.0.0 with -std=c++17 and SYCL20

%Taskflow works on Linux, Windows, and Mac OS X.

@section release-3-6-0_summary Release Summary

@section release-3-6-0_new_features New Features

@subsection release-3-6-0_taskflow_core Taskflow Core

+ Extended parallel algorithms to support different execution policies via tf::ExecutionPolicy
  + tf::Taskflow::for_each_index(P&& policy, B first, E last, S step, C callable)
  + tf::Taskflow::for_each(P&& policy, B first, E last, C callable) 
  + tf::Taskflow::transform(P&& policy, B first1, E last1, O d_first, C c)
  + tf::Taskflow::transform(P&& policy, B1 first1, E1 last1, B2 first2, O d_first, C c)
  + tf::Taskflow::reduce(P&& policy, B first, E last, T& result, O bop) 
  + tf::Taskflow::transform_reduce(P&& policy, B first, E last, T& result, BOP bop, UOP uop)

@subsection release-3-6-0_cudaflow cudaFlow

@subsection release-3-6-0_utilities Utilities

@subsection release-3-6-0_profiler Taskflow Profiler (TFProf)

@section release-3-6-0_bug_fixes Bug Fixes 

+ Fixed the compilation bugs caused by clashing `MAX_PRIORITY` wtih `winspool.h` ([#459](https://github.com/taskflow/taskflow/pull/459))

If you encounter any potential bugs, please submit an issue at @IssueTracker.

@section release-3-6-0_breaking_changes Breaking Changes

+ Dropped in-place support for running tf::cudaFlow from a dedicated task

@code{.cpp}
// previous - no longer supported
taskflow.emplace([](tf::cudaFlow& cf){
  cf.offload();
});

// now - user to fully control tf::cudaFlow for maximum flexibility
taskflow.emplace([](){
  tf::cudaFlow cf;

  // offload the cudaflow asynchronously through a stream
  tf::cudaStream stream;
  cf.run(stream);

  // wait for the cudaflow completes
  stream.synchronize();
});
@endcode

+ Dropped in-place support for running tf::cudaFlowCapturer from a dedicated task

@code{.cpp}
// previous - now longer supported
taskflow.emplace([](tf::cudaFlowCapturer& cf){
  cf.offload();
});

// now - user to fully control tf::cudaFlowCapturer for maximum flexibility
taskflow.emplace([](){
  tf::cudaFlowCapturer cf;

  // offload the cudaflow asynchronously through a stream
  tf::cudaStream stream;
  cf.run(stream);

  // wait for the cudaflow completes
  stream.synchronize();
});
@endcode

+ Dropped in-place support for running tf::syclFlow from a dedicated task
+ Move all buffer query methods of CUDA standard algorithms inside execution policy

@code{.cpp}
// previous - no longer supported
tf::cuda_reduce_buffer_size<tf::cudaDefaultExecutionPolicy, int>(N);

// now (and similarly for other parallel algorithms)
tf::cudaDefaultExecutionPolicy policy(stream);
policy.reduce_bufsz<int>(N);
@endcode

  + tf::cudaExecutionPolicy<NT, VT>::reduce_bufsz
  + tf::cudaExecutionPolicy<NT, VT>::scan_bufsz
  + tf::cudaExecutionPolicy<NT, VT>::merge_bufsz
  + tf::cudaExecutionPolicy<NT, VT>::min_element_bufsz
  + tf::cudaExecutionPolicy<NT, VT>::max_element_bufsz

@section release-3-6-0_deprecated_items Deprecated and Removed Items 

@section release-3-6-0_documentation Documentation

+ Added @ref ExecutionPolicy 
+ Revised %Taskflow algorithms to include execution policy
  + @ref ParallelIterations
  + @ref ParallelTransforms
  + @ref ParallelReduction
+ Revised CUDA standard algorithms to correct the use of buffer query methods
  + @ref CUDASTDReduce
  + @ref CUDASTDFind
  + @ref CUDASTDMerge
  + @ref CUDASTDScan

@section release-3-6-0_miscellaneous_items Miscellaneous Items

Please do not hesitate to contact @twhuang if you intend to collaborate with us 
on using %Taskflow in your scientific computing projects.

*/

}


