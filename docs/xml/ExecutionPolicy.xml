<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="ExecutionPolicy" kind="page">
    <compoundname>ExecutionPolicy</compoundname>
    <title>Execution Policy</title>
    <tableofcontents/>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An execution policy allows applications to optimize parallel algorithms using specific scheduling methods.</para><sect1 id="ExecutionPolicy_1DefineAnExecutionPolicy">
<title>Define an Execution Policy</title>
<para>An execution policy defines how to partition and distribute iterations to different workers when running parallel algorithms in Taskflow, such as <ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">tf::Taskflow::for_each</ref> and <ref refid="classtf_1_1FlowBuilder_1a9f7befa968cf69ea0a20dc267f746f3e" kindref="member">tf::Taskflow::transform</ref>. The following example shows how to create parallel-iteration tasks with different execution policies:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector&lt;int&gt;</ref><sp/>data<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>execution<sp/>policies<sp/>with<sp/>different<sp/>partitioning<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::GuidedPartitioner&gt;</ref><sp/>guided_policy;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::StaticPartitioner&gt;</ref><sp/>static_policy;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::RandomPartitioner&gt;</ref><sp/>random_policy;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::DynamicPartitioner&gt;</ref><sp/>dynamic_policy;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>four<sp/>parallel-iteration<sp/>tasks<sp/>from<sp/>the<sp/>four<sp/>execution<sp/>policies</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">for_each</ref>(guided_policy,<sp/>data.begin(),<sp/>data.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){});</highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">for_each</ref>(static_policy,<sp/>data.begin(),<sp/>data.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){});</highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">for_each</ref>(random_policy,<sp/>data.begin(),<sp/>data.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){});</highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">for_each</ref>(dynamic_policy,<sp/>data.begin(),<sp/>data.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){});</highlight></codeline>
</programlisting></para><para>Each partitioner has a specific algorithm to partition iterations into a set of <emphasis>chunks</emphasis> and distribute chunks to workers. A chunk is the basic unit of work that will be run by a worker during the execution of parallel iterations. The following figure illustrates the scheduling diagram for three major partitioners, <ref refid="classtf_1_1StaticPartitioner" kindref="compound">tf::StaticPartitioner</ref>, <ref refid="classtf_1_1DynamicPartitioner" kindref="compound">tf::DynamicPartitioner</ref>, and <ref refid="classtf_1_1GuidedPartitioner" kindref="compound">tf::GuidedPartitioner</ref>:</para><para><image type="html" name="parallel_for_partition_algorithms.png"></image>
</para><para>Depending on applications, partitioning algorithms can impact the performance a lot. For example, if a parallel-iteration workload contains a regular work unit per iteration, <ref refid="classtf_1_1StaticPartitioner" kindref="compound">tf::StaticPartitioner</ref> may deliver the best performance. On the other hand, if the work unit per iteration is irregular and unbalanced, <ref refid="classtf_1_1GuidedPartitioner" kindref="compound">tf::GuidedPartitioner</ref> or <ref refid="classtf_1_1DynamicPartitioner" kindref="compound">tf::DynamicPartitioner</ref> can outperform <ref refid="classtf_1_1StaticPartitioner" kindref="compound">tf::StaticPartitioner</ref>.</para><para><simplesect kind="note"><para>By default, all parallel algorithms in Taskflow use <ref refid="namespacetf_1a04cb73dba3a2101ed735b8e7122aca60" kindref="member">tf::DefaultExecutionPolicy</ref>, which is based on guided scheduling via <ref refid="classtf_1_1GuidedPartitioner" kindref="compound">tf::GuidedPartitioner</ref>.</para></simplesect>
</para></sect1>
<sect1 id="ExecutionPolicy_1DefineAStaticExecutionPolicy">
<title>Define a Static Execution Policy</title>
<para>Static execution policy splits iterations into <computeroutput>iter_size/chunk_size</computeroutput> chunks and distribute chunks to workers in order. If no chunk size is given (<computeroutput>chunk_size</computeroutput> is <computeroutput>1</computeroutput>), Taskflow will partition iterations into chunks that are approximately equal in size. The following code creates a static execution policy with chunk size equal to 100:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::StaticPartitioner&gt;</ref><sp/>static_policy(100);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="ExecutionPolicy_1DefineADynamicExecutionPolicy">
<title>Define a Dynamic Execution Policy</title>
<para>Dynamic execution policy splits iterations into <computeroutput>iter_size/chunk_size</computeroutput> chunks and distribute chunks to workers without any specific order. The default chunk size is <computeroutput>1</computeroutput>, if not specified. The following code creates a dynamic execution policy with chunk size equal to 2:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::DynamicPartitioner&gt;</ref><sp/>dynamic_policy(2);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="ExecutionPolicy_1DefineAGuidedExecutionPolicy">
<title>Define a Guided Execution Policy</title>
<para>Guided execution policy dynamically decides the chunk size. The size of a chunk is proportional to the number of unassigned iterations divided by the number of the threads, and the size will gradually decrease to the specified chunk size (default <computeroutput>1</computeroutput>). The last chunk may be smaller than the specified chunk size. The following code creates a guided execution policy with chunk size equal to 10:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::GuidedPartitioner&gt;</ref><sp/>guided_policy(10);</highlight></codeline>
</programlisting></para><para>Guided execution policy can achieve decent performance for most parallel algorithms, especially those with irregular and unbalanced work per iteration. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
