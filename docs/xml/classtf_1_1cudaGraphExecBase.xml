<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1cudaGraphExecBase" kind="class" language="C++" prot="public">
    <compoundname>tf::cudaGraphExecBase</compoundname>
    <basecompoundref refid="cpp/memory/unique_ptr" prot="public" virt="non-virtual">std::unique_ptr&lt; std::remove_pointer_t&lt; cudaGraphExec_t &gt;, Deleter &gt;</basecompoundref>
    <includes refid="cuda__graph__exec_8hpp" local="no">taskflow/cuda/cuda_graph_exec.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Creator</type>
      </param>
      <param>
        <type>typename Deleter</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtf_1_1cudaGraphExecBase_1ac7c11b5dd4d0ce5bdeb64f89b14eb173" prot="public" static="no">
        <type><ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref>&lt; std::remove_pointer_t&lt; cudaGraphExec_t &gt;, Deleter &gt;</type>
        <definition>using tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::base_type =  std::unique_ptr&lt;std::remove_pointer_t&lt;cudaGraphExec_t&gt;, Deleter&gt;</definition>
        <argsstring></argsstring>
        <name>base_type</name>
        <briefdescription>
<para>base <ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref> type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="88" column="3" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1a3dc4936c19687b4af7e57c4745cac73d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::cudaGraphExecBase</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>cudaGraphExecBase</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>constructs a <computeroutput>cudaGraphExec</computeroutput> object by passing the given arguments to the executable CUDA graph creator </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <computeroutput>cudaGraphExec</computeroutput> object by passing the given arguments to the executable CUDA graph creator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to pass to the executable CUDA graph creator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="98" column="12" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1a619731d4217feb169edb97031ab15bdb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::operator cudaGraphExec_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator cudaGraphExec_t</name>
        <briefdescription>
<para>implicit conversion to the underlying <computeroutput>cudaGraphExec_t</computeroutput> object </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the underlying <computeroutput>cudaGraphExec_t</computeroutput> object, equivalently calling base_type::get(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="108" column="3" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1a6d44311d0bb62c31a160682bd4af9d28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::run</definition>
        <argsstring>(cudaStream_t stream)</argsstring>
        <name>run</name>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>runs the executable graph via the given CUDA stream </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="115" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1ad3da5e8cdae7555a08735fabefdf131d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::host</definition>
        <argsstring>(cudaTask task, C &amp;&amp;callable, void *user_data)</argsstring>
        <name>host</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>updates parameters of a host task </para>
        </briefdescription>
        <detaileddescription>
<para>This method updates the parameter of the given host task (similar to <ref refid="classtf_1_1cudaGraphBase_1a4b730405596091d534af5737752b4682" kindref="member">tf::cudaFlow::host</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="131" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1a9d9842feec938f6dad9d21f66a202bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::kernel</definition>
        <argsstring>(cudaTask task, dim3 g, dim3 b, size_t shm, F f, ArgsT... args)</argsstring>
        <name>kernel</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>dim3</type>
          <declname>g</declname>
        </param>
        <param>
          <type>dim3</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>shm</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>updates parameters of a kernel task </para>
        </briefdescription>
        <detaileddescription>
<para>The method is similar to <ref refid="classtf_1_1cudaGraphBase_1a1473a15a6023fbc25e1f029f2ff84aec" kindref="member">tf::cudaFlow::kernel</ref> but operates on a task of type tf::cudaTaskType::KERNEL. The kernel function name must NOT change. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="141" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="230" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1ae1a9cea343a306e114daeeab9418dd5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::memset</definition>
        <argsstring>(cudaTask task, void *dst, int ch, size_t count)</argsstring>
        <name>memset</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>updates parameters of a memset task </para>
        </briefdescription>
        <detaileddescription>
<para>The method is similar to <ref refid="classtf_1_1cudaGraphBase_1a10196f49de261a4042de328aab2452c8" kindref="member">tf::cudaFlow::memset</ref> but operates on a task of type tf::cudaTaskType::MEMSET. The source/destination memory may have different address values but must be allocated from the same contexts as the original source/destination memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="154" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="275" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1aea367c6ac5b55854b9b695d4e249b17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::memcpy</definition>
        <argsstring>(cudaTask task, void *tgt, const void *src, size_t bytes)</argsstring>
        <name>memcpy</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tgt</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>updates parameters of a memcpy task </para>
        </briefdescription>
        <detaileddescription>
<para>The method is similar to <ref refid="classtf_1_1cudaGraphBase_1a5e704c7bb669a82f4fe140ecb4576eb0" kindref="member">tf::cudaFlow::memcpy</ref> but operates on a task of type tf::cudaTaskType::MEMCPY. The source/destination memory may have different address values but must be allocated from the same contexts as the original source/destination memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="165" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="262" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1a195d1630c74657d095225ec0cb5343f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; is_pod_v&lt; T &gt; &amp;&amp;(sizeof(T)==1||sizeof(T)==2||sizeof(T)==4), void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::zero</definition>
        <argsstring>(cudaTask task, T *dst, size_t count)</argsstring>
        <name>zero</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>updates parameters of a memset task to a zero task </para>
        </briefdescription>
        <detaileddescription>
<para>The method is similar to <ref refid="classtf_1_1cudaGraphBase_1ab45bc592a33380adf74d6f1e7690bd4c" kindref="member">tf::cudaFlow::zero</ref> but operates on a task of type tf::cudaTaskType::MEMSET.</para>
<para>The source/destination memory may have different address values but must be allocated from the same contexts as the original source/destination memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="180" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1afa67dc39ef8f142284b799dd0c93aed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; is_pod_v&lt; T &gt; &amp;&amp;(sizeof(T)==1||sizeof(T)==2||sizeof(T)==4), void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::fill</definition>
        <argsstring>(cudaTask task, T *dst, T value, size_t count)</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>updates parameters of a memset task to a fill task </para>
        </briefdescription>
        <detaileddescription>
<para>The method is similar to <ref refid="classtf_1_1cudaGraphBase_1a32634c5645c14b99ceeaafe77ea5ea62" kindref="member">tf::cudaFlow::fill</ref> but operates on a task of type tf::cudaTaskType::MEMSET.</para>
<para>The source/destination memory may have different address values but must be allocated from the same contexts as the original source/destination memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="195" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaGraphExecBase_1aed30ccc98bb2187e9141c4f7b63ff66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; T, void &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::cudaGraphExecBase&lt; Creator, Deleter &gt;::copy</definition>
        <argsstring>(cudaTask task, T *tgt, const T *src, size_t num)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classtf_1_1cudaTask" kindref="compound">cudaTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>tgt</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>updates parameters of a memcpy task to a copy task </para>
        </briefdescription>
        <detaileddescription>
<para>The method is similar to <ref refid="classtf_1_1cudaGraphBase_1a02a041d5dd9e1e8958eb43e09331051e" kindref="member">tf::cudaFlow::copy</ref> but operates on a task of type tf::cudaTaskType::MEMCPY. The source/destination memory may have different address values but must be allocated from the same contexts as the original source/destination memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/cuda/cuda_graph_exec.hpp" line="209" column="8" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="252" bodyend="258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to create an executable CUDA graph managed by C++ smart pointer </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Creator</parametername>
</parameternamelist>
<parameterdescription>
<para>functor to create the stream (used in constructor) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>functor to delete the stream (used in destructor)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This class wraps a <computeroutput>cudaGraphExec_t</computeroutput> handle with <computeroutput><ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref></computeroutput> to ensure proper resource management and automatic cleanup. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>tf::cudaGraphExecBase&lt; Creator, Deleter &gt;</label>
        <link refid="classtf_1_1cudaGraphExecBase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::unique_ptr&lt; std::remove_pointer_t&lt; cudaGraphExec_t &gt;, Deleter &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>tf::cudaGraphExecBase&lt; Creator, Deleter &gt;</label>
        <link refid="classtf_1_1cudaGraphExecBase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::unique_ptr&lt; std::remove_pointer_t&lt; cudaGraphExec_t &gt;, Deleter &gt;</label>
      </node>
    </collaborationgraph>
    <location file="taskflow/cuda/cuda_graph_exec.hpp" line="79" column="1" bodyfile="taskflow/cuda/cuda_graph_exec.hpp" bodystart="79" bodyend="210"/>
    <listofallmembers>
      <member refid="classtf_1_1cudaGraphExecBase_1ac7c11b5dd4d0ce5bdeb64f89b14eb173" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>base_type</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1aed30ccc98bb2187e9141c4f7b63ff66e" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>copy</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1a3dc4936c19687b4af7e57c4745cac73d" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>cudaGraphExecBase</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1afa67dc39ef8f142284b799dd0c93aed2" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>fill</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1ad3da5e8cdae7555a08735fabefdf131d" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>host</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1a9d9842feec938f6dad9d21f66a202bb6" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>kernel</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1aea367c6ac5b55854b9b695d4e249b17e" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>memcpy</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1ae1a9cea343a306e114daeeab9418dd5b" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>memset</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1a619731d4217feb169edb97031ab15bdb" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>operator cudaGraphExec_t</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1a6d44311d0bb62c31a160682bd4af9d28" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>run</name></member>
      <member refid="classtf_1_1cudaGraphExecBase_1a195d1630c74657d095225ec0cb5343f1" prot="public" virt="non-virtual"><scope>tf::cudaGraphExecBase</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
