<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structtf_1_1ExecutionPolicy" kind="struct" language="C++" prot="public">
    <compoundname>tf::ExecutionPolicy</compoundname>
    <basecompoundref prot="public" virt="non-virtual">P</basecompoundref>
    <includes refid="execution__policy_8hpp" local="no">execution_policy.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename P</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structtf_1_1ExecutionPolicy_1a4dfcdc0ded93172d298fb489fe91cdf9" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool tf::ExecutionPolicy&lt; P &gt;::is_static_partitioner</definition>
        <argsstring></argsstring>
        <name>is_static_partitioner</name>
        <initializer>= std::is_same_v&lt;P, <ref refid="classtf_1_1StaticPartitioner" kindref="compound">StaticPartitioner</ref>&gt;</initializer>
        <briefdescription>
<para>queries if the execution policy is associated with a static partitioner </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
<<<<<<< HEAD
        <location file="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/taskflow/algorithm/execution_policy.hpp" line="378" column="1" bodyfile="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/taskflow/algorithm/execution_policy.hpp" bodystart="378" bodyend="-1"/>
=======
        <location file="/home/twhuang/Code/taskflow/taskflow/algorithm/execution_policy.hpp" line="378" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/algorithm/execution_policy.hpp" bodystart="378" bodyend="-1"/>
>>>>>>> 78da7a8a112846993a5fee5a8f9ab2ac05d942ac
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structtf_1_1ExecutionPolicy_1aa17c2be569a937c9be16f4a23ad8adb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tf::ExecutionPolicy&lt; P &gt;::ExecutionPolicy</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>ExecutionPolicy</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>constructs an execution policy </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>argument types to construct the underlying partitioner </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to construct the underlying partitioner </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
<<<<<<< HEAD
        <location file="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/taskflow/algorithm/execution_policy.hpp" line="388" column="1" bodyfile="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/taskflow/algorithm/execution_policy.hpp" bodystart="388" bodyend="389"/>
=======
        <location file="/home/twhuang/Code/taskflow/taskflow/algorithm/execution_policy.hpp" line="388" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/algorithm/execution_policy.hpp" bodystart="388" bodyend="389"/>
>>>>>>> 78da7a8a112846993a5fee5a8f9ab2ac05d942ac
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>struct to construct an execution policy for parallel algorithms </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>partitioner type</para></parameterdescription>
</parameteritem>
</parameterlist>
An execution policy defines the scheduling method for running parallel algorithms, such <ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">tf::Taskflow::for_each</ref>, <ref refid="classtf_1_1FlowBuilder_1afc7bd7a737febf30d5d1d706c4b65f84" kindref="member">tf::Taskflow::reduce</ref>, and so on. The template type, <computeroutput>P</computeroutput>, specifies the partitioning algorithm that will be used by the scheduling method:</para><para><itemizedlist>
<listitem><para><ref refid="classtf_1_1GuidedPartitioner" kindref="compound">tf::GuidedPartitioner</ref></para></listitem><listitem><para><ref refid="classtf_1_1DynamicPartitioner" kindref="compound">tf::DynamicPartitioner</ref></para></listitem><listitem><para><ref refid="classtf_1_1StaticPartitioner" kindref="compound">tf::StaticPartitioner</ref></para></listitem><listitem><para><ref refid="classtf_1_1RandomPartitioner" kindref="compound">tf::RandomPartitioner</ref></para></listitem></itemizedlist>
</para><para>Depending on applications, partitioning algorithms can impact the performance a lot. For example, if a parallel-iteration workload contains a regular work unit per iteration, <ref refid="classtf_1_1StaticPartitioner" kindref="compound">tf::StaticPartitioner</ref> can deliver the best performance. On the other hand, if the work unit per iteration is irregular and unbalanced, <ref refid="classtf_1_1GuidedPartitioner" kindref="compound">tf::GuidedPartitioner</ref> or <ref refid="classtf_1_1DynamicPartitioner" kindref="compound">tf::DynamicPartitioner</ref> can outperform <ref refid="classtf_1_1StaticPartitioner" kindref="compound">tf::StaticPartitioner</ref>.</para><para>The following example constructs a parallel-for task using an execution policy with guided partitioning algorithm:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector&lt;int&gt;</ref><sp/>data<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structtf_1_1ExecutionPolicy" kindref="compound">tf::ExecutionPolicy&lt;tf::GuidedPartitioner&gt;</ref><sp/>policy;</highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">for_each</ref>(policy,<sp/>data.begin(),<sp/>data.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){});</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow).run();</highlight></codeline>
</programlisting></para><para>In most applications, <ref refid="classtf_1_1GuidedPartitioner" kindref="compound">tf::GuidedPartitioner</ref> can deliver decent performance and therefore is used as the default execution policy, <ref refid="namespacetf_1a04cb73dba3a2101ed735b8e7122aca60" kindref="member">tf::DefaultExecutionPolicy</ref>.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/vector" kindref="compound" external="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector&lt;int&gt;</ref><sp/>data<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10}</highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1ad2299fddbd6165cc7f24f57a734d2839" kindref="member">for_each</ref>(<ref refid="structtf_1_1ExecutionPolicy" kindref="compound">tf::DefaultExecutionPolicy</ref>{},<sp/>data.begin(),<sp/>data.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>for_each<sp/>task<sp/>is<sp/>the<sp/>same<sp/>as<sp/>above<sp/>(with<sp/>default<sp/>execution<sp/>policy)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>taskflow.for_each(data.begin(),<sp/>data.end(),<sp/>[](int<sp/>item){});</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow).run();</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="127">
        <label>P</label>
      </node>
      <node id="126">
        <label>tf::ExecutionPolicy&lt; P &gt;</label>
        <link refid="structtf_1_1ExecutionPolicy"/>
        <childnode refid="127" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="129">
        <label>P</label>
      </node>
      <node id="128">
        <label>tf::ExecutionPolicy&lt; P &gt;</label>
        <link refid="structtf_1_1ExecutionPolicy"/>
        <childnode refid="129" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
<<<<<<< HEAD
    <location file="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/taskflow/algorithm/execution_policy.hpp" line="373" column="1" bodyfile="/home/chchiu/Documents/taskflow/scalable_defer_pipeline_0323/taskflow/taskflow/algorithm/execution_policy.hpp" bodystart="373" bodyend="391"/>
=======
    <location file="/home/twhuang/Code/taskflow/taskflow/algorithm/execution_policy.hpp" line="373" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/algorithm/execution_policy.hpp" bodystart="373" bodyend="391"/>
>>>>>>> 78da7a8a112846993a5fee5a8f9ab2ac05d942ac
    <listofallmembers>
      <member refid="structtf_1_1ExecutionPolicy_1aa17c2be569a937c9be16f4a23ad8adb0" prot="public" virt="non-virtual"><scope>tf::ExecutionPolicy</scope><name>ExecutionPolicy</name></member>
      <member refid="structtf_1_1ExecutionPolicy_1a4dfcdc0ded93172d298fb489fe91cdf9" prot="public" virt="non-virtual"><scope>tf::ExecutionPolicy</scope><name>is_static_partitioner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
