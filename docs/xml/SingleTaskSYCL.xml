<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="SingleTaskSYCL" kind="page">
    <compoundname>SingleTaskSYCL</compoundname>
    <title>Single Task</title>
    <tableofcontents>
      <tocsect>
        <name>Run a Task with a Single Thread</name>
        <reference>SingleTaskSYCL_1SingleTaskSYCLSingleTask</reference>
    </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>tf::syclFlow provides a template method, tf::syclFlow::single_task, for creating a task to run the given callable using a single kernel thread.</para>
<sect1 id="SingleTaskSYCL_1SingleTaskSYCLSingleTask">
<title>Run a Task with a Single Thread</title>
<para>You can create a task to run a kernel function just once, i.e., using one GPU thread. This is handy when you want to set up a single or a few global variables that do not need multiple threads and will be used by multiple kernels afterwards. The following example creates a single-task kernel that sets <computeroutput>gpu_variable</computeroutput> to 1.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">sycl::queue<sp/>queue;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>gpu_variable<sp/>=<sp/>sycl::malloc_shared&lt;int&gt;(1,<sp/>queue);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>=<sp/>taskflow.emplace_on([&amp;]<sp/>(tf::syclFlow&amp;<sp/>sf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>single<sp/>task<sp/>to<sp/>set<sp/>the<sp/>gpu_variable<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tf::syclTask<sp/>set_var<sp/>=<sp/>sf.single_task(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[gpu_variable]<sp/>()<sp/>{<sp/>*gpu_variable<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>one<sp/>kernel<sp/>task<sp/>that<sp/>needs<sp/>access<sp/>to<sp/>gpu_variable</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tf::syclTask<sp/>kernel1<sp/>=<sp/>sf.parallel_for(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sycl::range&lt;1&gt;(N),<sp/>[=]<sp/>(sycl::id&lt;1&gt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>data1[id]<sp/>*=<sp/>gpu_variable;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_par.precede(kernel1);</highlight></codeline>
<codeline><highlight class="normal">},<sp/>queue);</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
